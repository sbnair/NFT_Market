{"version":3,"sources":["test_script.ts","logo.svg","Home.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["CANDY_MACHINE_PROGRAM","anchor","PublicKey","SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID","TOKEN_METADATA_PROGRAM_ID","awaitTransactionSignatureConfirmation","txid","timeout","connection","a","commitment","queryStatus","done","status","slot","confirmations","err","subId","Promise","resolve","reject","setTimeout","console","log","onSignature","result","context","e","error","getSignatureStatuses","signatureStatuses","value","sleep","_signatureSubscriptions","removeSignatureListener","createAssociatedTokenAccountInstruction","associatedTokenAddress","payer","walletAddress","splTokenMintAddress","keys","pubkey","isSigner","isWritable","SystemProgram","programId","TOKEN_PROGRAM_ID","SYSVAR_RENT_PUBKEY","TransactionInstruction","data","Buffer","from","getCandyMachineState","anchorWallet","candyMachineId","provider","preflightCommitment","fetchIdl","idl","program","candyMachine","id","account","fetch","state","itemsAvailable","toNumber","itemsRedeemed","itemsRemaining","goLiveDate","Date","getMasterEdition","mint","findProgramAddress","toBuffer","getMetadata","getTokenWallet","wallet","mintOneToken","config","treasury","Keypair","generate","publicKey","token","metadata","masterEdition","getMinimumBalanceForRentExemption","MintLayout","span","rent","rpc","mintNft","accounts","mintAuthority","updateAuthority","tokenMetadataProgram","tokenProgram","systemProgram","clock","SYSVAR_CLOCK_PUBKEY","signers","instructions","createAccount","fromPubkey","newAccountPubkey","space","lamports","Token","createInitMintInstruction","createMintToInstruction","shortenAddress","address","chars","slice","ms","ConnectButton","styled","WalletDialogButton","CounterText","MintContainer","div","MintButton","Button","indexes","items","name","myItems","renderCounter","days","hours","minutes","seconds","completed","Home","props","useState","setCurPage","curItems","setCurItems","balance","setBalance","isActive","setIsActive","isSoldOut","setIsSoldOut","isMinting","setIsMinting","setItemsAvailable","setItemsRedeemed","setItemsRemaining","open","message","severity","undefined","alertState","setAlertState","startDate","setStartDate","useAnchorWallet","setCandyMachine","refreshCandyMachineState","onMint","mintTxId","txTimeout","msg","code","indexOf","getBalance","LAMPORTS_PER_SOL","useEffect","style","position","width","display","flexDirection","justifyContent","minHeight","cursor","margin","onClick","toBase58","toLocaleString","flexWrap","maxWidth","map","item","idx","backgroundColor","alt","src","minWidth","zIndex","Skeleton","height","top","left","disabled","variant","CircularProgress","date","onMount","onComplete","renderer","right","Snackbar","autoHideDuration","onClose","Alert","process","REACT_APP_TREASURY_ADDRESS","REACT_APP_CANDY_MACHINE_CONFIG","REACT_APP_CANDY_MACHINE_ID","network","REACT_APP_SOLANA_NETWORK","rpcHost","REACT_APP_SOLANA_RPC_HOST","Connection","startDateSeed","parseInt","REACT_APP_CANDY_START_DATE","theme","createTheme","palette","type","overrides","MuiButtonBase","root","MuiButton","textTransform","padding","startIcon","marginRight","endIcon","marginLeft","App","endpoint","useMemo","clusterApiUrl","wallets","getPhantomWallet","getSlopeWallet","getSolflareWallet","getSolletWallet","getSolletExtensionWallet","ThemeProvider","autoConnect","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gUAQaA,EAAwB,IAAIC,IAAYC,UACnD,+CAGIC,EAA0C,IAAIF,IAAYC,UAC9D,gDAGIE,EAA4B,IAAIH,IAAYC,UAChD,+CAiBWG,EAAqC,uCAAG,WACnDC,EACAC,EACAC,GAHmD,mCAAAC,EAAA,6DAInDC,EAJmD,+BAId,SACrCC,EALmD,gCAO/CC,GAAO,EACPC,EAAoD,CACtDC,KAAM,EACNC,cAAe,EACfC,IAAK,MAEHC,EAAQ,EAbuC,SAcpC,IAAIC,QAAJ,uCAAY,WAAOC,EAASC,GAAhB,SAAAX,EAAA,sDACzBY,YAAW,WACLT,IAGJA,GAAO,EACPU,QAAQC,IAAI,4BACZH,EAAO,CAAEb,SAAS,OACjBA,GACH,IACEU,EAAQT,EAAWgB,YACjBlB,GACA,SAACmB,EAAaC,GACZd,GAAO,EACPC,EAAS,CACPG,IAAKS,EAAOT,IACZF,KAAMY,EAAQZ,KACdC,cAAe,GAEbU,EAAOT,KACTM,QAAQC,IAAI,yBAA0BE,EAAOT,KAC7CI,EAAOP,KAEPS,QAAQC,IAAI,yBAA0BE,GACtCN,EAAQN,MAGZH,GAEF,MAAOiB,GACPf,GAAO,EACPU,QAAQM,MAAM,oBAAqBtB,EAAMqB,GA/BlB,UAiCjBf,IAAQD,EAjCS,uBAmCvB,sBAAC,4BAAAF,EAAA,+EAEmCD,EAAWqB,qBAAqB,CAC9DvB,IAHL,OAESwB,EAFT,OAKGjB,EAASiB,GAAqBA,EAAkBC,MAAM,GACjDnB,IACEC,EAEMA,EAAOG,KAChBM,QAAQC,IAAI,iBAAkBjB,EAAMO,GACpCD,GAAO,EACPQ,EAAOP,EAAOG,MACJH,EAAOE,eAGjBO,QAAQC,IAAI,wBAAyBjB,EAAMO,GAC3CD,GAAO,EACPO,EAAQN,IAJRS,QAAQC,IAAI,4BAA6BjB,EAAMO,GAN/CS,QAAQC,IAAI,uBAAwBjB,EAAMO,IARjD,gDAsBQD,GACHU,QAAQC,IAAI,8BAA+BjB,EAA3C,MAvBL,wDAAD,GAnCuB,SA8DjB0B,EAAM,KA9DW,iEAAZ,yDAdoC,cAcnDnB,EAdmD,OAiF/CL,EAAWyB,wBAAwBhB,IACrCT,EAAW0B,wBAAwBjB,GAErCL,GAAO,EACPU,QAAQC,IAAI,mBAAoBV,GArFmB,kBAsF5CA,GAtF4C,4CAAH,0DAyF/BsB,EAA0C,SAC3DC,EACAC,EACAC,EACAC,GAEA,IAAMC,EAAO,CACX,CAAEC,OAAQJ,EAAOK,UAAU,EAAMC,YAAY,GAC7C,CAAEF,OAAQL,EAAwBM,UAAU,EAAOC,YAAY,GAC/D,CAAEF,OAAQH,EAAeI,UAAU,EAAOC,YAAY,GACtD,CAAEF,OAAQF,EAAqBG,UAAU,EAAOC,YAAY,GAC5D,CACEF,OAAQxC,IAAY2C,cAAcC,UAClCH,UAAU,EACVC,YAAY,GAEd,CAAEF,OAAQK,IAAkBJ,UAAU,EAAOC,YAAY,GACzD,CACEF,OAAQxC,IAAY8C,mBACpBL,UAAU,EACVC,YAAY,IAGhB,OAAO,IAAI1C,IAAY+C,uBAAuB,CAC5CR,OACAK,UAAW1C,EACX8C,KAAMC,EAAOC,KAAK,OAITC,EAAoB,uCAAG,WAClCC,EACAC,EACA9C,GAHkC,+BAAAC,EAAA,6DAK5B8C,EAAW,IAAItD,IAAgBO,EAAY6C,EAAc,CAC7DG,oBAAqB,WANW,SAShBvD,IAAewD,SAC/BzD,EACAuD,GAXgC,cAS5BG,EAT4B,OAc5BC,EAAU,IAAI1D,IAAeyD,EAAK1D,EAAuBuD,GACzDK,EAAe,CACnBC,GAAIP,EACJ9C,aACAmD,WAlBgC,SAqBTA,EAAQG,QAAQF,aAAaG,MAAMT,GArB1B,cAqB5BU,EArB4B,OAuB5BC,EAAiBD,EAAMf,KAAKgB,eAAeC,WAC3CC,EAAgBH,EAAMG,cAAcD,WACpCE,EAAiBH,EAAiBE,EAEpCE,EAAaL,EAAMf,KAAKoB,WAAWH,WACvCG,EAAa,IAAIC,KAAkB,IAAbD,GAEtB/C,QAAQC,IAAI,CACV0C,iBACAE,gBACAC,iBACAC,eAlCgC,kBAqC3B,CACLT,eACAK,iBACAE,gBACAC,iBACAC,eA1CgC,4CAAH,0DA8C3BE,EAAgB,uCAAG,WACvBC,GADuB,SAAA/D,EAAA,sEAIfR,IAAYC,UAAUuE,mBAC1B,CACEvB,EAAOC,KAAK,YACZ/C,EAA0BsE,WAC1BF,EAAKE,WACLxB,EAAOC,KAAK,YAEd/C,GAXmB,uCAarB,IAbqB,2CAAH,sDAgBhBuE,EAAW,uCAAG,WAClBH,GADkB,SAAA/D,EAAA,sEAIVR,IAAYC,UAAUuE,mBAC1B,CACEvB,EAAOC,KAAK,YACZ/C,EAA0BsE,WAC1BF,EAAKE,YAEPtE,GAVc,uCAYhB,IAZgB,2CAAH,sDAeXwE,EAAc,uCAAG,WACrBC,EACAL,GAFqB,SAAA/D,EAAA,sEAKbR,IAAYC,UAAUuE,mBAC1B,CAACI,EAAOH,WAAY5B,IAAiB4B,WAAYF,EAAKE,YACtDvE,GAPiB,uCASnB,IATmB,2CAAH,wDAYP2E,EAAY,uCAAG,WAC1BlB,EACAmB,EACA1C,EACA2C,GAJ0B,2BAAAvE,EAAA,6DAM1Ba,QAAQC,IAAIqC,GACNY,EAAOvE,IAAYgF,QAAQC,WAPP,SAQNN,EAAevC,EAAOmC,EAAKW,WARrB,cAQpBC,EARoB,OASlB5E,EAAwBoD,EAAxBpD,WAAYmD,EAAYC,EAAZD,QATM,SAUHgB,EAAYH,EAAKW,WAVd,cAUpBE,EAVoB,iBAWEd,EAAiBC,EAAKW,WAXxB,eAWpBG,EAXoB,iBAaP9E,EAAW+E,kCAC5BC,IAAWC,MAda,eAapBC,EAboB,iBAiBb/B,EAAQgC,IAAIC,QAAQ,CAC/BC,SAAU,CACRd,SACAnB,aAAcA,EAAaC,GAC3BxB,MAAOA,EACPwC,OAAQG,EACRR,KAAMA,EAAKW,UACXE,WACAC,gBACAQ,cAAezD,EACf0D,gBAAiB1D,EACjB2D,qBAAsB5F,EACtB6F,aAAcnD,IACdoD,cAAejG,IAAY2C,cAAcC,UACzC6C,KAAMzF,IAAY8C,mBAClBoD,MAAOlG,IAAYmG,qBAErBC,QAAS,CAAC7B,GACV8B,aAAc,CACZrG,IAAY2C,cAAc2D,cAAc,CACtCC,WAAYnE,EACZoE,iBAAkBjC,EAAKW,UACvBuB,MAAOlB,IAAWC,KAClBkB,SAAUjB,EACV7C,UAAWC,MAEb8D,IAAMC,0BACJ/D,IACA0B,EAAKW,UACL,EACA9C,EACAA,GAEFF,EACEiD,EACA/C,EACAA,EACAmC,EAAKW,WAEPyB,IAAME,wBACJhE,IACA0B,EAAKW,UACLC,EACA/C,EACA,GACA,MA9DoB,qFAAH,4DAoEZ0E,EAAiB,SAACC,GAAwC,IAAvBC,EAAsB,uDAAd,EACtD,MAAM,GAAN,OAAUD,EAAQE,MAAM,EAAGD,GAA3B,cAAuCD,EAAQE,OAAOD,KAGlDjF,EAAQ,SAACmF,GACb,OAAO,IAAIjG,SAAQ,SAACC,GAAD,OAAaE,WAAWF,EAASgG,S,qtBC3TvC,MAA0B,iC,QCwBnCC,EAAgBC,YAAOC,IAAPD,CAAH,0BAEbE,EAAcF,IAAO5B,KAAV,0BAEX+B,EAAgBH,IAAOI,IAAV,0BAEbC,EAAaL,YAAOM,IAAPN,CAAH,0BAeVO,EAAU,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,IAE9CC,EAAQ,CACZ,CAACC,KAAM,KACP,CAACA,KAAM,KACP,CAACA,KAAM,KACP,CAACA,KAAM,KACP,CAACA,KAAM,KACP,CAACA,KAAM,KACP,CAACA,KAAM,KACP,CAACA,KAAM,KACP,CAACA,KAAM,KACP,CAACA,KAAM,MACP,CAACA,KAAM,MACP,CAACA,KAAM,OAEHC,EAAU,CACd,CAACD,KAAM,MACP,CAACA,KAAM,OA2THE,EAAgB,SAAC,GAAuD,IAArDC,EAAoD,EAApDA,KAAMC,EAA8C,EAA9CA,MAAOC,EAAuC,EAAvCA,QAASC,EAA8B,EAA9BA,QAA8B,EAArBC,UACtD,OACE,eAACd,EAAD,WACGW,EAAsB,IAAbD,GAAQ,GADpB,WACqCE,EADrC,aACwDC,EADxD,eAMWE,EAhUF,SAACC,GAAsB,IAAD,EACHC,mBAAS,GADN,mBACjBC,GADiB,aAEDD,mBAAoBX,GAFnB,mBAE1Ba,EAF0B,KAEhBC,EAFgB,OAGHH,qBAHG,mBAG1BI,EAH0B,KAGjBC,EAHiB,OAIDL,oBAAS,GAJR,mBAI1BM,EAJ0B,KAIhBC,EAJgB,OAKCP,oBAAS,GALV,mBAK1BQ,EAL0B,KAKfC,EALe,OAMCT,oBAAS,GANV,mBAM1BU,EAN0B,KAMfC,EANe,OAQWX,mBAAS,GARpB,mBAQ1BvE,EAR0B,KAQVmF,EARU,OASSZ,mBAAS,GATlB,mBAS1BrE,EAT0B,KASXkF,EATW,OAUWb,mBAAS,GAVpB,oBAU1BpE,GAV0B,MAUVkF,GAVU,SAYGd,mBAAqB,CACvDe,MAAM,EACNC,QAAS,GACTC,cAAUC,IAfqB,qBAY1BC,GAZ0B,MAYdC,GAZc,SAkBCpB,mBAAS,IAAIlE,KAAKiE,EAAMsB,YAlBzB,qBAkB1BA,GAlB0B,MAkBfC,GAlBe,MAoB3BjF,GAASkF,cApBkB,GAqBOvB,qBArBP,qBAqB1B5E,GArB0B,MAqBZoG,GArBY,MAuB3BC,GAA2B,WAC/B,sBAAC,sCAAAxJ,EAAA,yDACMoE,GADN,iEASWzB,YACRyB,GACA0D,EAAMjF,eACNiF,EAAM/H,YAZT,gBAIGoD,EAJH,EAIGA,aACAS,EALH,EAKGA,WACAJ,EANH,EAMGA,eACAG,EAPH,EAOGA,eACAD,EARH,EAQGA,cAOFiF,EAAkBnF,GAClBqF,GAAkBlF,GAClBiF,EAAiBlF,GAEjB8E,EAAgC,IAAnB7E,GACb0F,GAAazF,GACb2F,GAAgBpG,GArBjB,2CAAD,IAyBIsG,GAAM,uCAAG,kCAAAzJ,EAAA,kEAEX0I,GAAa,IACTtE,MAAM,OAAIjB,SAAJ,IAAIA,QAAJ,EAAIA,GAAcD,SAHjB,iCAIcmB,YACrBlB,GACA2E,EAAMxD,OACNF,GAAOM,UACPoD,EAAMvD,UARC,cAIHmF,EAJG,gBAWY9J,YACnB8J,EACA5B,EAAM6B,UACN7B,EAAM/H,WACN,gBACA,GAhBO,QAmBL,QAREK,EAXG,cAmBL,IAACA,OAAD,EAACA,EAAQG,KAOX4I,GAAc,CACZL,MAAM,EACNC,QAAS,iCACTC,SAAU,UATZG,GAAc,CACZL,MAAM,EACNC,QAAS,mCACTC,SAAU,YAvBL,0DAmCPD,EAAU,KAAMa,KAAO,oCACtB,KAAMA,IAQU,MAAf,KAAMC,MACRd,EAAO,YACPP,GAAa,IACW,MAAf,KAAMqB,OACfd,EAAO,sCAXL,KAAMA,QAAQe,QAAQ,WACf,KAAMf,QAAQe,QAAQ,SAC/Bf,EAAO,YACE,KAAMA,QAAQe,QAAQ,WAC/Bf,EAAO,yDAWXI,GAAc,CACZL,MAAM,EACNC,UACAC,SAAU,UAvDD,sBA0DP5E,GA1DO,kCA2Da0D,EAAM/H,WAAWgK,WAAW3F,GAAOM,WA3DhD,QA2DHyD,EA3DG,OA4DTC,EAAWD,EAAU6B,oBA5DZ,eA8DXtB,GAAa,GACbc,KA/DW,6EAAH,qDAqFZ,OAlBAS,qBAAU,WACR,sBAAC,4BAAAjK,EAAA,0DACKoE,GADL,gCAEyB0D,EAAM/H,WAAWgK,WAAW3F,GAAOM,WAF5D,OAESyD,EAFT,OAGGC,EAAWD,EAAU6B,oBAHxB,sBAKG9B,EAAYD,GACZD,EAAW,GANd,0CAAD,KASC,CAAC5D,GAAQ0D,EAAM/H,aAElBkK,oBAAUT,GAA0B,CAClCpF,GACA0D,EAAMjF,eACNiF,EAAM/H,aAIN,uBAAMmK,MAAO,CAACC,SAAU,YAAxB,UACE,sBAAKD,MAAO,CACVE,MAAO,OACPC,QAAS,OACTC,cAAe,MACfC,eAAgB,SAChBC,UAAW,KALb,UAQGpG,IAAU,sBAAM8F,MAAO,CAACE,MAAO,GAAIK,OAAQ,UAAWC,OAAQ,IAAKC,QAAS,WAC3E3C,EAAW,GACXE,EAAYd,IAFH,kBAIVhD,IAAU,sBAAM8F,MAAO,CAACE,MAAO,GAAIK,OAAQ,UAAWC,OAAQ,IAAKC,QAAS,WAC3E3C,EAAW,GACXE,EAAYZ,IAFH,0BAKZlD,IACC,sBAAK8F,MAAO,CAACE,MAAO,OAAQC,QAAS,OAAQC,cAAe,MAAOC,eAAgB,iBAAnF,UACE,gCACE,kDAAqB/G,KACrB,2CAAcE,KACd,4CAAeC,SAEjB,gCACE,wCAAW2C,YAAelC,GAAOM,UAAUkG,YAAc,OACzD,2CAAczC,GAAW,GAAG0C,iBAA5B,gBAKN,cAAC9D,EAAD,UACI3C,GAgDF,qBAAK8F,MAAO,CACVE,MAAO,OACPC,QAAS,OACTC,cAAe,MACfQ,SAAU,OACVP,eAAgB,SAChBQ,SAAU,MANZ,SASG9C,EAAS+C,KAAI,SAACC,EAAMC,GAAP,OACZ,sBAAKhB,MAAO,CACVG,QAAS,OACTC,cAAe,SACfC,eAAgB,aAChBH,MAAO,IACPM,OAAQ,IALV,UAOE,sBACER,MAAO,CACLC,SAAU,WACVgB,gBAAiB,wBAHrB,UAME,qBACEC,IAAK,GAAKF,EACVG,IAAK,gCAAgCH,EACrChB,MAAO,CACLoB,SAAU,IACVd,UAAW,IACXe,OAAQ,KAGZ,qBACEH,IAAK,OAASF,EACdG,IAAKG,EACLpB,MAAO,IACPqB,OAAQ,IACRvB,MAAO,CACLC,SAAU,WACVuB,IAAK,EACLC,KAAM,EACNR,gBAAiB,uBACjBI,QAAS,QAIf,cAACtE,EAAD,CACE2E,SAAUrD,GAAaE,IAAcJ,EACrCsC,QAASlB,GACToC,QAAQ,YAHV,SAKGtD,EACC,WACEF,EACFI,EACE,cAACqD,EAAA,EAAD,IAEA,OAGF,cAAC,IAAD,CACEC,KAAM3C,GACN4C,QAAS,qBAAGpE,WAA6BU,GAAY,IACrD2D,WAAY,kBAAM3D,GAAY,IAC9B4D,SAAU3E,cA/GpB,qCACA,cAACZ,EAAD,CAAeuD,MAAO,CAACC,SAAU,WAAYgC,MAAO,EAAGT,IAAK,GAA5D,4BACA,qBAAKxB,MAAO,CACVE,MAAO,OACPC,QAAS,OACTC,cAAe,MACfQ,SAAU,OACVP,eAAgB,SAChBQ,SAAU,MANZ,SAQI5D,EAAQ6D,KAAI,SAACC,EAAMC,GAAP,OACZ,sBAAKhB,MAAO,CACVG,QAAS,OACTC,cAAe,SACfC,eAAgB,aAChBH,MAAO,IACPM,OAAQ,IALV,UAOE,qBACER,MAAO,CACLC,SAAU,WACVgB,gBAAiB,wBAHrB,SAME,qBACEC,IAAK,OAASF,EACdG,IAAKG,EACLpB,MAAO,IACPqB,OAAQ,IACRvB,MAAO,CACLiB,gBAAiB,uBACjBI,QAAS,OAIf,cAACtE,EAAD,CACE2E,UAAU,EACVjB,QAASlB,GACToC,QAAQ,YAHV,+BAsFV,cAACO,EAAA,EAAD,CACEtD,KAAMI,GAAWJ,KACjBuD,iBAAkB,IAClBC,QAAS,kBAAMnD,GAAc,2BAAKD,IAAN,IAAkBJ,MAAM,MAHtD,SAKE,cAACyD,EAAA,EAAD,CACED,QAAS,kBAAMnD,GAAc,2BAAKD,IAAN,IAAkBJ,MAAM,MACpDE,SAAUE,GAAWF,SAFvB,SAIGE,GAAWH,gB,mCCrVhBxE,EAAW,IAAI/E,IAAYC,UAC/B+M,mIAAYC,4BAGRnI,EAAS,IAAI9E,IAAYC,UAC7B+M,mIAAYE,gCAGR7J,EAAiB,IAAIrD,IAAYC,UACrC+M,mIAAYG,4BAGRC,EAAUJ,mIAAYK,yBAEtBC,EAAUN,mIAAYO,0BACtBhN,EAAa,IAAIP,IAAYwN,WAAWF,GAExCG,EAAgBC,SAASV,mIAAYW,2BAA6B,IAIlEC,EAAQC,YAAY,CACtBC,QAAS,CACLC,KAAM,QAEVC,UAAW,CACPC,cAAe,CACXC,KAAM,CACFnD,eAAgB,eAGxBoD,UAAW,CACPD,KAAM,CACFE,mBAAe3E,EACf4E,QAAS,aAEbC,UAAW,CACPC,YAAa,GAEjBC,QAAS,CACLC,WAAY,OAwCbC,EAlCH,WACV,IAAMC,EAAWC,mBAAQ,kBAAMC,wBAAczB,KAAU,IAEjD0B,EAAUF,mBACd,iBAAM,CACFG,cACAC,cACAC,cACAC,YAAgB,CAAE9B,YAClB+B,YAAyB,CAAE/B,eAE/B,IAGF,OACI,cAACgC,EAAA,EAAD,CAAexB,MAAOA,EAAtB,SACE,cAAC,IAAD,CAAoBe,SAAUA,EAA9B,SACE,cAAC,IAAD,CAAgBG,QAASA,EAASO,aAAa,EAA/C,SACE,cAAC,IAAD,UACE,cAAC,EAAD,CACEhM,eAAgBA,EAChByB,OAAQA,EACRvE,WAAYA,EACZqJ,UAAW6D,EACX1I,SAAUA,EACVoF,UApDE,eC7BHmF,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.0d2c44cb.chunk.js","sourcesContent":["import * as anchor from \"@project-serum/anchor\";\n\nimport {\n  MintLayout,\n  TOKEN_PROGRAM_ID,\n  Token,\n} from \"@solana/spl-token\";\n\nexport const CANDY_MACHINE_PROGRAM = new anchor.web3.PublicKey(\n  \"cndyAnrLdpjq1Ssp1z8xxDsB8dxe7u4HL5Nxi2K5WXZ\"\n);\n\nconst SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID = new anchor.web3.PublicKey(\n  \"ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL\"\n);\n\nconst TOKEN_METADATA_PROGRAM_ID = new anchor.web3.PublicKey(\n  \"metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s\"\n);\n\nexport interface CandyMachine {\n  id: anchor.web3.PublicKey,\n  connection: anchor.web3.Connection;\n  program: anchor.Program;\n}\n\ninterface CandyMachineState {\n  candyMachine: CandyMachine;\n  itemsAvailable: number;\n  itemsRedeemed: number;\n  itemsRemaining: number;\n  goLiveDate: Date,\n}\n\nexport const awaitTransactionSignatureConfirmation = async (\n  txid: anchor.web3.TransactionSignature,\n  timeout: number,\n  connection: anchor.web3.Connection,\n  commitment: anchor.web3.Commitment = \"recent\",\n  queryStatus = false\n): Promise<anchor.web3.SignatureStatus | null | void> => {\n  let done = false;\n  let status: anchor.web3.SignatureStatus | null | void = {\n    slot: 0,\n    confirmations: 0,\n    err: null,\n  };\n  let subId = 0;\n  status = await new Promise(async (resolve, reject) => {\n    setTimeout(() => {\n      if (done) {\n        return;\n      }\n      done = true;\n      console.log(\"Rejecting for timeout...\");\n      reject({ timeout: true });\n    }, timeout);\n    try {\n      subId = connection.onSignature(\n        txid,\n        (result: any, context: any) => {\n          done = true;\n          status = {\n            err: result.err,\n            slot: context.slot,\n            confirmations: 0,\n          };\n          if (result.err) {\n            console.log(\"Rejected via websocket\", result.err);\n            reject(status);\n          } else {\n            console.log(\"Resolved via websocket\", result);\n            resolve(status);\n          }\n        },\n        commitment\n      );\n    } catch (e) {\n      done = true;\n      console.error(\"WS error in setup\", txid, e);\n    }\n    while (!done && queryStatus) {\n      // eslint-disable-next-line no-loop-func\n      (async () => {\n        try {\n          const signatureStatuses = await connection.getSignatureStatuses([\n            txid,\n          ]);\n          status = signatureStatuses && signatureStatuses.value[0];\n          if (!done) {\n            if (!status) {\n              console.log(\"REST null result for\", txid, status);\n            } else if (status.err) {\n              console.log(\"REST error for\", txid, status);\n              done = true;\n              reject(status.err);\n            } else if (!status.confirmations) {\n              console.log(\"REST no confirmations for\", txid, status);\n            } else {\n              console.log(\"REST confirmation for\", txid, status);\n              done = true;\n              resolve(status);\n            }\n          }\n        } catch (e) {\n          if (!done) {\n            console.log(\"REST connection error: txid\", txid, e);\n          }\n        }\n      })();\n      await sleep(2000);\n    }\n  });\n\n  //@ts-ignore\n  if (connection._signatureSubscriptions[subId]) {\n    connection.removeSignatureListener(subId);\n  }\n  done = true;\n  console.log(\"Returning status\", status);\n  return status;\n}\n\n/* export */ const createAssociatedTokenAccountInstruction = (\n  associatedTokenAddress: anchor.web3.PublicKey,\n  payer: anchor.web3.PublicKey,\n  walletAddress: anchor.web3.PublicKey,\n  splTokenMintAddress: anchor.web3.PublicKey\n) => {\n  const keys = [\n    { pubkey: payer, isSigner: true, isWritable: true },\n    { pubkey: associatedTokenAddress, isSigner: false, isWritable: true },\n    { pubkey: walletAddress, isSigner: false, isWritable: false },\n    { pubkey: splTokenMintAddress, isSigner: false, isWritable: false },\n    {\n      pubkey: anchor.web3.SystemProgram.programId,\n      isSigner: false,\n      isWritable: false,\n    },\n    { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n    {\n      pubkey: anchor.web3.SYSVAR_RENT_PUBKEY,\n      isSigner: false,\n      isWritable: false,\n    },\n  ];\n  return new anchor.web3.TransactionInstruction({\n    keys,\n    programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n    data: Buffer.from([]),\n  });\n}\n\nexport const getCandyMachineState = async (\n  anchorWallet: anchor.Wallet,\n  candyMachineId: anchor.web3.PublicKey,\n  connection: anchor.web3.Connection,\n): Promise<CandyMachineState> => {\n  const provider = new anchor.Provider(connection, anchorWallet, {\n    preflightCommitment: \"recent\",\n  });\n\n  const idl = await anchor.Program.fetchIdl(\n    CANDY_MACHINE_PROGRAM,\n    provider\n  );\n\n  const program = new anchor.Program(idl, CANDY_MACHINE_PROGRAM, provider);\n  const candyMachine = {\n    id: candyMachineId,\n    connection,\n    program,\n  }\n\n  const state: any = await program.account.candyMachine.fetch(candyMachineId);\n\n  const itemsAvailable = state.data.itemsAvailable.toNumber();\n  const itemsRedeemed = state.itemsRedeemed.toNumber();\n  const itemsRemaining = itemsAvailable - itemsRedeemed;\n\n  let goLiveDate = state.data.goLiveDate.toNumber();\n  goLiveDate = new Date(goLiveDate * 1000);\n\n  console.log({\n    itemsAvailable,\n    itemsRedeemed,\n    itemsRemaining,\n    goLiveDate,\n  })\n\n  return {\n    candyMachine,\n    itemsAvailable,\n    itemsRedeemed,\n    itemsRemaining,\n    goLiveDate,\n  };\n}\n\nconst getMasterEdition = async (\n  mint: anchor.web3.PublicKey\n): Promise<anchor.web3.PublicKey> => {\n  return (\n    await anchor.web3.PublicKey.findProgramAddress(\n      [\n        Buffer.from(\"metadata\"),\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n        mint.toBuffer(),\n        Buffer.from(\"edition\"),\n      ],\n      TOKEN_METADATA_PROGRAM_ID\n    )\n  )[0];\n};\n\nconst getMetadata = async (\n  mint: anchor.web3.PublicKey\n): Promise<anchor.web3.PublicKey> => {\n  return (\n    await anchor.web3.PublicKey.findProgramAddress(\n      [\n        Buffer.from(\"metadata\"),\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n        mint.toBuffer(),\n      ],\n      TOKEN_METADATA_PROGRAM_ID\n    )\n  )[0];\n};\n\nconst getTokenWallet = async (\n  wallet: anchor.web3.PublicKey,\n  mint: anchor.web3.PublicKey\n) => {\n  return (\n    await anchor.web3.PublicKey.findProgramAddress(\n      [wallet.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), mint.toBuffer()],\n      SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID\n    )\n  )[0];\n};\n\nexport const mintOneToken = async (\n  candyMachine: CandyMachine,\n  config: anchor.web3.PublicKey, // feels like this should be part of candyMachine?\n  payer: anchor.web3.PublicKey,\n  treasury: anchor.web3.PublicKey,\n): Promise<string> => {\n  console.log(candyMachine);\n  const mint = anchor.web3.Keypair.generate();\n  const token = await getTokenWallet(payer, mint.publicKey);\n  const { connection, program } = candyMachine;\n  const metadata = await getMetadata(mint.publicKey);\n  const masterEdition = await getMasterEdition(mint.publicKey);\n\n  const rent = await connection.getMinimumBalanceForRentExemption(\n    MintLayout.span\n  );\n\n  return await program.rpc.mintNft({\n    accounts: {\n      config,\n      candyMachine: candyMachine.id,\n      payer: payer,\n      wallet: treasury,\n      mint: mint.publicKey,\n      metadata,\n      masterEdition,\n      mintAuthority: payer,\n      updateAuthority: payer,\n      tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\n      tokenProgram: TOKEN_PROGRAM_ID,\n      systemProgram: anchor.web3.SystemProgram.programId,\n      rent: anchor.web3.SYSVAR_RENT_PUBKEY,\n      clock: anchor.web3.SYSVAR_CLOCK_PUBKEY,\n    },\n    signers: [mint],\n    instructions: [\n      anchor.web3.SystemProgram.createAccount({\n        fromPubkey: payer,\n        newAccountPubkey: mint.publicKey,\n        space: MintLayout.span,\n        lamports: rent,\n        programId: TOKEN_PROGRAM_ID,\n      }),\n      Token.createInitMintInstruction(\n        TOKEN_PROGRAM_ID,\n        mint.publicKey,\n        0,\n        payer,\n        payer\n      ),\n      createAssociatedTokenAccountInstruction(\n        token,\n        payer,\n        payer,\n        mint.publicKey\n      ),\n      Token.createMintToInstruction(\n        TOKEN_PROGRAM_ID,\n        mint.publicKey,\n        token,\n        payer,\n        [],\n        1\n      ),\n    ],\n  });\n}\n\nexport const shortenAddress = (address: string, chars = 4): string => {\n  return `${address.slice(0, chars)}...${address.slice(-chars)}`;\n};\n\nconst sleep = (ms: number): Promise<void> => {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n}","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport Countdown from \"react-countdown\";\nimport { Button, CircularProgress, Snackbar } from \"@material-ui/core\";\nimport Alert from \"@material-ui/lab/Alert\";\n\nimport * as anchor from \"@project-serum/anchor\";\n\nimport { LAMPORTS_PER_SOL } from \"@solana/web3.js\";\n\nimport { useAnchorWallet } from \"@solana/wallet-adapter-react\";\nimport { WalletDialogButton } from \"@solana/wallet-adapter-material-ui\";\n\nimport {\n  CandyMachine,\n  awaitTransactionSignatureConfirmation,\n  getCandyMachineState,\n  mintOneToken,\n  shortenAddress,\n} from \"./test_script\";\n\nimport Skeleton from './logo.svg';\nimport { randomBytes } from \"crypto\";\n\nconst ConnectButton = styled(WalletDialogButton)``;\n\nconst CounterText = styled.span``; // add your styles here\n\nconst MintContainer = styled.div``; // add your styles here\n\nconst MintButton = styled(Button)``; // add your styles here\n\nexport interface HomeProps {\n  candyMachineId: anchor.web3.PublicKey;\n  config: anchor.web3.PublicKey;\n  connection: anchor.web3.Connection;\n  startDate: number;\n  treasury: anchor.web3.PublicKey;\n  txTimeout: number;\n}\n\ninterface NFTItem {\n  name: string;\n}\n\nconst indexes = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];\n\nconst items = [\n  {name: '1'},\n  {name: '2'},\n  {name: '3'},\n  {name: '4'},\n  {name: '5'},\n  {name: '6'},\n  {name: '7'},\n  {name: '8'},\n  {name: '9'},\n  {name: '10'},\n  {name: '11'},\n  {name: '12'},\n];\nconst myItems = [\n  {name: '11'},\n  {name: '12'},\n];\n\nconst Home = (props: HomeProps) => {\n  const [curPage, setCurPage] = useState(0);\n  const [curItems, setCurItems] = useState<NFTItem[]>(items);\n  const [balance, setBalance] = useState<number>();\n  const [isActive, setIsActive] = useState(false); // true when countdown completes\n  const [isSoldOut, setIsSoldOut] = useState(false); // true when items remaining is zero\n  const [isMinting, setIsMinting] = useState(false); // true when user got to press MINT\n\n  const [itemsAvailable, setItemsAvailable] = useState(0);\n  const [itemsRedeemed, setItemsRedeemed] = useState(0);\n  const [itemsRemaining, setItemsRemaining] = useState(0);\n\n  const [alertState, setAlertState] = useState<AlertState>({\n    open: false,\n    message: \"\",\n    severity: undefined,\n  });\n\n  const [startDate, setStartDate] = useState(new Date(props.startDate));\n\n  const wallet = useAnchorWallet();\n  const [candyMachine, setCandyMachine] = useState<CandyMachine>();\n\n  const refreshCandyMachineState = () => {\n    (async () => {\n      if (!wallet) return;\n\n      const {\n        candyMachine,\n        goLiveDate,\n        itemsAvailable,\n        itemsRemaining,\n        itemsRedeemed,\n      } = await getCandyMachineState(\n        wallet as anchor.Wallet,\n        props.candyMachineId,\n        props.connection\n      );\n\n      setItemsAvailable(itemsAvailable);\n      setItemsRemaining(itemsRemaining);\n      setItemsRedeemed(itemsRedeemed);\n\n      setIsSoldOut(itemsRemaining === 0);\n      setStartDate(goLiveDate);\n      setCandyMachine(candyMachine);\n    })();\n  };\n\n  const onMint = async () => {\n    try {\n      setIsMinting(true);\n      if (wallet && candyMachine?.program) {\n        const mintTxId = await mintOneToken(\n          candyMachine,\n          props.config,\n          wallet.publicKey,\n          props.treasury\n        );\n\n        const status = await awaitTransactionSignatureConfirmation(\n          mintTxId,\n          props.txTimeout,\n          props.connection,\n          \"singleGossip\",\n          false\n        );\n\n        if (!status?.err) {\n          setAlertState({\n            open: true,\n            message: \"Congratulations! Mint succeeded!\",\n            severity: \"success\",\n          });\n        } else {\n          setAlertState({\n            open: true,\n            message: \"Mint failed! Please try again!\",\n            severity: \"error\",\n          });\n        }\n      }\n    } catch (error: any) {\n      // TODO: blech:\n      let message = error.msg || \"Minting failed! Please try again!\";\n      if (!error.msg) {\n        if (error.message.indexOf(\"0x138\")) {\n        } else if (error.message.indexOf(\"0x137\")) {\n          message = `SOLD OUT!`;\n        } else if (error.message.indexOf(\"0x135\")) {\n          message = `Insufficient funds to mint. Please fund your wallet.`;\n        }\n      } else {\n        if (error.code === 311) {\n          message = `SOLD OUT!`;\n          setIsSoldOut(true);\n        } else if (error.code === 312) {\n          message = `Minting period hasn't started yet.`;\n        }\n      }\n\n      setAlertState({\n        open: true,\n        message,\n        severity: \"error\",\n      });\n    } finally {\n      if (wallet) {\n        const balance = await props.connection.getBalance(wallet.publicKey);\n        setBalance(balance / LAMPORTS_PER_SOL);\n      }\n      setIsMinting(false);\n      refreshCandyMachineState();\n    }\n  };\n\n  useEffect(() => {\n    (async () => {\n      if (wallet) {\n        const balance = await props.connection.getBalance(wallet.publicKey);\n        setBalance(balance / LAMPORTS_PER_SOL);\n      } else {\n        setCurItems(curItems);\n        setCurPage(0);\n      }\n    })();\n  }, [wallet, props.connection]);\n\n  useEffect(refreshCandyMachineState, [\n    wallet,\n    props.candyMachineId,\n    props.connection,\n  ]);\n\n  return (\n    <main style={{position: 'relative'}}>\n      <div style={{\n        width: '100%',\n        display: 'flex',\n        flexDirection: 'row',\n        justifyContent: 'center',\n        minHeight: 100,\n      }}\n      >\n        {wallet && <span style={{width: 80, cursor: 'pointer', margin: 20}} onClick={() => {\n          setCurPage(0);\n          setCurItems(items);\n        }}>Home</span>}\n        {wallet && <span style={{width: 80, cursor: 'pointer', margin: 20}} onClick={() => {\n          setCurPage(1);\n          setCurItems(myItems);\n        }}>My heroes</span>}\n      </div>\n      {wallet && (\n        <div style={{width: '100%', display: 'flex', flexDirection: 'row', justifyContent: 'space-between'}}>\n          <div>\n            <p>Total Available: {itemsAvailable}</p>\n            <p>Redeemed: {itemsRedeemed}</p>\n            <p>Remaining: {itemsRemaining}</p>\n          </div>\n          <div>\n            <p>Wallet {shortenAddress(wallet.publicKey.toBase58() || \"\")}</p>\n            <p>Balance: {(balance || 0).toLocaleString()} SOL</p>\n          </div>\n        </div>\n      )}\n\n      <MintContainer>\n        {!wallet ? (\n          <>\n          <ConnectButton style={{position: 'absolute', right: 0, top: 0}}>Connect Wallet</ConnectButton>\n          <div style={{\n            width: '100%',\n            display: 'flex',\n            flexDirection: 'row',\n            flexWrap: 'wrap',\n            justifyContent: 'center',\n            maxWidth: 1100\n          }}>\n            { indexes.map((item, idx) => \n              <div style={{\n                display: 'flex',\n                flexDirection: 'column',\n                justifyContent: 'flex-start',\n                width: 200,\n                margin: 30,\n              }}>\n                <div\n                  style={{\n                    position: 'relative',\n                    backgroundColor: 'rgba(50, 50, 0, 0.5)',\n                  }}\n                  >\n                  <img\n                    alt={'back' + idx}\n                    src={Skeleton}\n                    width={200}\n                    height={200}\n                    style={{\n                      backgroundColor: 'rgba(50, 50, 0, 0.5)',\n                      zIndex: -1,\n                    }}\n                  />\n                </div>\n                <MintButton\n                  disabled={true}\n                  onClick={onMint}\n                  variant=\"contained\"\n                >\n                  MINT\n                </MintButton>\n              </div>\n            )}\n          </div>\n          </>\n        ) : \n        <div style={{\n          width: '100%',\n          display: 'flex',\n          flexDirection: 'row',\n          flexWrap: 'wrap',\n          justifyContent: 'center',\n          maxWidth: 1100\n        }}\n        >\n          {curItems.map((item, idx) => \n            <div style={{\n              display: 'flex',\n              flexDirection: 'column',\n              justifyContent: 'flex-start',\n              width: 200,\n              margin: 30,\n            }}>\n              <div\n                style={{\n                  position: 'relative',\n                  backgroundColor: 'rgba(50, 50, 0, 0.5)',\n                }}\n                >\n                <img\n                  alt={'' + idx}\n                  src={\"https://placeimg.com/200/200/\"+idx}\n                  style={{\n                    minWidth: 200,\n                    minHeight: 200,\n                    zIndex: 1,\n                  }}\n                />\n                <img\n                  alt={'back' + idx}\n                  src={Skeleton}\n                  width={200}\n                  height={200}\n                  style={{\n                    position: 'absolute',\n                    top: 0,\n                    left: 0,\n                    backgroundColor: 'rgba(50, 50, 0, 0.5)',\n                    zIndex: -1,\n                  }}\n                />\n              </div>\n              <MintButton\n                disabled={isSoldOut || isMinting || !isActive}\n                onClick={onMint}\n                variant=\"contained\"\n              >\n                {isSoldOut ? (\n                  \"SOLD OUT\"\n                ) : isActive ? (\n                  isMinting ? (\n                    <CircularProgress />\n                  ) : (\n                    \"MINT\"\n                  )\n                ) : (\n                  <Countdown\n                    date={startDate}\n                    onMount={({ completed }) => completed && setIsActive(true)}\n                    onComplete={() => setIsActive(true)}\n                    renderer={renderCounter}\n                  />\n                )}\n              </MintButton>\n            </div>\n          )}\n        </div>\n        }\n      </MintContainer>\n\n      <Snackbar\n        open={alertState.open}\n        autoHideDuration={6000}\n        onClose={() => setAlertState({ ...alertState, open: false })}\n      >\n        <Alert\n          onClose={() => setAlertState({ ...alertState, open: false })}\n          severity={alertState.severity}\n        >\n          {alertState.message}\n        </Alert>\n      </Snackbar>\n    </main>\n  );\n};\n\ninterface AlertState {\n  open: boolean;\n  message: string;\n  severity: \"success\" | \"info\" | \"warning\" | \"error\" | undefined;\n}\n\nconst renderCounter = ({ days, hours, minutes, seconds, completed }: any) => {\n  return (\n    <CounterText>\n      {hours + (days || 0) * 24} hours, {minutes} minutes, {seconds} seconds\n    </CounterText>\n  );\n};\n\nexport default Home;\n","import \"./App.css\";\nimport { useMemo } from \"react\";\n\nimport Home from \"./Home\";\n\nimport * as anchor from \"@project-serum/anchor\";\nimport { clusterApiUrl } from \"@solana/web3.js\";\nimport { WalletAdapterNetwork } from \"@solana/wallet-adapter-base\";\nimport {\n  getPhantomWallet,\n  getSlopeWallet,\n  getSolflareWallet,\n  getSolletWallet,\n  getSolletExtensionWallet,\n} from \"@solana/wallet-adapter-wallets\";\n\nimport {\n  ConnectionProvider,\n  WalletProvider,\n} from \"@solana/wallet-adapter-react\";\n\nimport { WalletDialogProvider } from \"@solana/wallet-adapter-material-ui\";\nimport { createTheme, ThemeProvider } from \"@material-ui/core\";\n\nconst treasury = new anchor.web3.PublicKey(\n  process.env.REACT_APP_TREASURY_ADDRESS!\n);\n\nconst config = new anchor.web3.PublicKey(\n  process.env.REACT_APP_CANDY_MACHINE_CONFIG!\n);\n\nconst candyMachineId = new anchor.web3.PublicKey(\n  process.env.REACT_APP_CANDY_MACHINE_ID!\n);\n\nconst network = process.env.REACT_APP_SOLANA_NETWORK as WalletAdapterNetwork;\n\nconst rpcHost = process.env.REACT_APP_SOLANA_RPC_HOST!;\nconst connection = new anchor.web3.Connection(rpcHost);\n\nconst startDateSeed = parseInt(process.env.REACT_APP_CANDY_START_DATE!, 10);\n\nconst txTimeout = 30000; // milliseconds (confirm this works for your project)\n\nconst theme = createTheme({\n    palette: {\n        type: 'dark',\n    },\n    overrides: {\n        MuiButtonBase: {\n            root: {\n                justifyContent: 'flex-start',\n            },\n        },\n        MuiButton: {\n            root: {\n                textTransform: undefined,\n                padding: '12px 16px',\n            },\n            startIcon: {\n                marginRight: 8,\n            },\n            endIcon: {\n                marginLeft: 8,\n            },\n        },\n    },\n});\n\nconst App = () => {\n  const endpoint = useMemo(() => clusterApiUrl(network), []);\n\n  const wallets = useMemo(\n    () => [\n        getPhantomWallet(),\n        getSlopeWallet(),\n        getSolflareWallet(),\n        getSolletWallet({ network }),\n        getSolletExtensionWallet({ network })\n    ],\n    []\n  );\n\n  return (\n      <ThemeProvider theme={theme}>\n        <ConnectionProvider endpoint={endpoint}>\n          <WalletProvider wallets={wallets} autoConnect={true}>\n            <WalletDialogProvider>\n              <Home\n                candyMachineId={candyMachineId}\n                config={config}\n                connection={connection}\n                startDate={startDateSeed}\n                treasury={treasury}\n                txTimeout={txTimeout}\n              />\n            </WalletDialogProvider>\n          </WalletProvider>\n        </ConnectionProvider>\n      </ThemeProvider>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}